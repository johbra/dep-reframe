["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$for-all","~$clojure.test.check.properties"],"~:excludes",["~#set",[]],"~:name","^4","~:imports",null,"~:requires",["^ ","~$gen","~$clojure.test.check.generators","^;","^;","~$results","~$clojure.test.check.results","^=","^="],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$exception?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/properties.cljc","~:line",23,"~:column",17,"~:end-line",23,"~:end-column",27,"~:private",true,"~:arglists",["~#list",["~$quote",["^K",[["~$x"]]]]]],"^I",true,"^7","~$clojure.test.check.properties/exception?","^D","target/public/cljs-out/dep/clojure/test/check/properties.cljc","^H",27,"~:method-params",["^K",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^F",1,"~:variadic?",false,"^E",23,"~:ret-tag","~$boolean","^G",23,"~:max-fixed-arity",1,"~:fn-var",true,"^J",["^K",["^L",["^K",[["~$x"]]]]]],"~$->ErrorResult",["^ ","^B",null,"^C",["^ ","^D","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/properties.cljc","^H",23,"^F",12,"~:internal-ctor",true,"~:factory","~:positional","^E",15,"^G",15,"^J",["^K",["^L",["^K",[["~$error"]]]]],"~:doc","Positional factory function for clojure.test.check.properties/ErrorResult."],"^7","~$clojure.test.check.properties/->ErrorResult","^D","target/public/cljs-out/dep/clojure/test/check/properties.cljc","^H",23,"^N",["^K",[["^Z"]]],"^O",null,"^P",["^K",[null,null]],"^F",1,"^W",true,"^Q",false,"^X","^Y","^E",15,"^R","~$clojure.test.check.properties/ErrorResult","^G",15,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^Z"]]]]],"^[","Positional factory function for clojure.test.check.properties/ErrorResult."],"~$binding-gens",["^ ","^B",null,"^C",["^ ","^D","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/properties.cljc","^E",64,"^F",8,"^G",64,"^H",20,"^I",true,"^J",["^K",["^L",["^K",[["~$bindings"]]]]]],"^I",true,"^7","~$clojure.test.check.properties/binding-gens","^D","target/public/cljs-out/dep/clojure/test/check/properties.cljc","^H",20,"^N",["^K",[["^13"]]],"^O",null,"^P",["^K",[null,null]],"^F",1,"^Q",false,"^E",64,"^R","~$cljs.core/LazySeq","^G",64,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^13"]]]]]],"^3",["^ ","^B",null,"^C",["^ ","^D","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/properties.cljc","^H",18,"~:top-fn",["^ ","^Q",true,"~:fixed-arity",1,"^T",1,"^N",["^K",[["^K",["^13","~$body"]]]],"^J",["^K",[["^13","~$&","^18"]]],"^P",["^K",[null]]],"^F",11,"^E",68,"~:macro",true,"^G",68,"^J",["^K",["^L",["^K",[["^13","~$&","^18"]]]]],"^[","Returns a property, which is the combination of some generators and\n  an assertion that should be true for all generated values. Properties\n  can be used with `quick-check` or `defspec`.\n\n  `for-all` takes a `let`-style bindings vector, where the right-hand\n  side of each binding is a generator.\n\n  The body should be an expression of the generated values that will\n  be tested for truthiness, unless it is a special implementation of\n  the clojure.test.check.results/Result protocol. Exceptions in the\n  body will be caught and treated as failures.\n\n  When there are multiple binding pairs, the earlier pairs are not\n  visible to the later pairs.\n\n  If there are multiple body expressions, all but the last one are\n  executed for side effects, as with `do`.\n\n  Example:\n\n  (for-all [a gen/large-integer\n            b gen/large-integer]\n    (>= (+ a b) a))"],"^7","~$clojure.test.check.properties/for-all","^D","target/public/cljs-out/dep/clojure/test/check/properties.cljc","^H",18,"^16",["^ ","^Q",true,"^17",1,"^T",1,"^N",["^K",[["^K",["^13","^18"]]]],"^J",["^K",[["^13","~$&","^18"]]],"^P",["^K",[null]]],"^N",["^K",[["^K",["^13","^18"]]]],"^O",null,"^17",1,"^P",["^K",[null]],"^F",1,"^Q",true,"~:methods",[["^ ","^17",1,"^Q",true,"~:tag",["^6",["~$seq","~$cljs.core/IList"]]]],"^E",68,"^19",true,"^R","~$any","^G",68,"^T",1,"^U",false,"^J",["^K",[["^13","~$&","^18"]]],"^[","Returns a property, which is the combination of some generators and\n  an assertion that should be true for all generated values. Properties\n  can be used with `quick-check` or `defspec`.\n\n  `for-all` takes a `let`-style bindings vector, where the right-hand\n  side of each binding is a generator.\n\n  The body should be an expression of the generated values that will\n  be tested for truthiness, unless it is a special implementation of\n  the clojure.test.check.results/Result protocol. Exceptions in the\n  body will be caught and treated as failures.\n\n  When there are multiple binding pairs, the earlier pairs are not\n  visible to the later pairs.\n\n  If there are multiple body expressions, all but the last one are\n  executed for side effects, as with `do`.\n\n  Example:\n\n  (for-all [a gen/large-integer\n            b gen/large-integer]\n    (>= (+ a b) a))"],"~$apply-gen",["^ ","^B",null,"^C",["^ ","^D","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/properties.cljc","^E",27,"^F",17,"^G",27,"^H",26,"^I",true,"^J",["^K",["^L",["^K",[["~$function"]]]]]],"^I",true,"^7","~$clojure.test.check.properties/apply-gen","^D","target/public/cljs-out/dep/clojure/test/check/properties.cljc","^H",26,"^N",["^K",[["^1A"]]],"^O",null,"^P",["^K",[null,null]],"^F",1,"^Q",false,"^E",27,"^R","^1A","^G",27,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^1A"]]]]]],"~$for-all*",["^ ","^B",null,"^C",["^ ","^D","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/properties.cljc","^E",45,"^F",7,"^G",45,"^H",15,"^J",["^K",["^L",["^K",[["~$args","^1A"]]]]],"^[","A function version of `for-all`. Takes a sequence of N generators\n  and a function of N args, and returns a property that calls the\n  function with generated values and tests the return value for\n  truthiness, like with `for-all`.\n\n  Example:\n\n  (for-all* [gen/large-integer gen/large-integer]\n            (fn [a b] (>= (+ a b) a)))"],"^7","~$clojure.test.check.properties/for-all*","^D","target/public/cljs-out/dep/clojure/test/check/properties.cljc","^H",15,"^N",["^K",[["^1D","^1A"]]],"^O",null,"^P",["^K",[null,null]],"^F",1,"^Q",false,"^E",45,"^R","~$clojure.test.check.generators/Generator","^G",45,"^T",2,"^U",true,"^J",["^K",["^L",["^K",[["^1D","^1A"]]]]],"^[","A function version of `for-all`. Takes a sequence of N generators\n  and a function of N args, and returns a property that calls the\n  function with generated values and tests the return value for\n  truthiness, like with `for-all`.\n\n  Example:\n\n  (for-all* [gen/large-integer gen/large-integer]\n            (fn [a b] (>= (+ a b) a)))"],"~$map->ErrorResult",["^ ","^B",null,"^C",["^ ","^D","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/properties.cljc","^H",23,"^F",12,"^W",true,"^X","~:map","^E",15,"^G",15,"^J",["^K",["^L",["^K",[["~$G__24189"]]]]],"^[","Factory function for clojure.test.check.properties/ErrorResult, taking a map of keywords to field values."],"^7","~$clojure.test.check.properties/map->ErrorResult","^D","target/public/cljs-out/dep/clojure/test/check/properties.cljc","^H",23,"^N",["^K",[["^1I"]]],"^O",null,"^P",["^K",[null,null]],"^F",1,"^W",true,"^Q",false,"^X","^1H","^E",15,"^R","^11","^G",15,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^1I"]]]]],"^[","Factory function for clojure.test.check.properties/ErrorResult, taking a map of keywords to field values."],"~$binding-vars",["^ ","^B",null,"^C",["^ ","^D","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/properties.cljc","^E",60,"^F",8,"^G",60,"^H",20,"^I",true,"^J",["^K",["^L",["^K",[["^13"]]]]]],"^I",true,"^7","~$clojure.test.check.properties/binding-vars","^D","target/public/cljs-out/dep/clojure/test/check/properties.cljc","^H",20,"^N",["^K",[["^13"]]],"^O",null,"^P",["^K",[null,null]],"^F",1,"^Q",false,"^E",60,"^R","^15","^G",60,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^13"]]]]]],"~$ErrorResult",["^ ","~:num-fields",1,"~:protocols",["^6",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$clojure.test.check.results/Result","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^7","^11","^D","target/public/cljs-out/dep/clojure/test/check/properties.cljc","^H",23,"~:type",true,"^F",12,"^W",true,"^E",15,"~:record",true,"^G",15,"^1<","^1A","~:skip-protocol-flag",["^6",["^1P","^1Q","^1R","^1S","^1T","^1U","^1V","^1W","^1Y","^1Z","^1[","^20","^21","^22","^23"]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^4","^4","^:","^;","^;","^;"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:args","~:clojure.test.check.properties/error","^1E","~:function","~:result","~$cljs.core/fn","~:error","^Z"]],"~:order",["^2@","^2<","^Z","^2>","^2=","^2;","^1E","^2?"]],"^[",null]