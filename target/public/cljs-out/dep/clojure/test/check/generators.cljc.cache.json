["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$let","~$clojure.test.check.generators"],"~:excludes",["~#set",["~$uuid","~$set","~$namespace","~$boolean","~$map","~$char","~$shuffle","^3","~$double","~$int","~$symbol","~$sorted-set","~$vector","~$not-empty","~$list","~$keyword","~$hash-map","~$byte","~$sequence","~$bytes"]],"~:name","^4","~:imports",null,"~:requires",["^ ","~$gstring","~$goog.string","~$rose","~$clojure.test.check.rose-tree","^P","^P","^N","^N","~$cljs.core","^Q","~$clojure.test.check.random","^R","~$string","~$clojure.string","^T","^T","~$random","^R","~$core","^Q"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$coll-distinct-by*",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","~:line",702,"~:column",17,"~:end-line",702,"~:end-column",34,"~:private",true,"~:arglists",["~#list",["~$quote",["^18",[["~$empty-coll","~$key-fn","~$shuffle-fn","~$gen","~$rng","~$size","~$num-elements","~$min-elements","~$max-tries","~$ex-fn"]]]]],"~:doc","Returns a rose tree."],"^16",true,"^J","~$clojure.test.check.generators/coll-distinct-by*","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",34,"~:method-params",["^18",[["^1:","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B","^1C"]]],"~:protocol-impl",null,"~:arglists-meta",["^18",[null,null]],"^13",1,"~:variadic?",false,"^12",702,"~:ret-tag","~$clojure.test.check.rose-tree/RoseTree","^14",702,"~:max-fixed-arity",10,"~:fn-var",true,"^17",["^18",["^19",["^18",[["^1:","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B","^1C"]]]]],"^1D","Returns a rose tree."],"~$gen-fmap",["^ ","~:no-doc",true,"^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",53,"^13",7,"^14",53,"^15",15,"^17",["^18",["^19",["^18",[["~$k",["^ ","~$h","~:gen"]]]]]],"^1D","Internal function.","^1O",true],"^J","~$clojure.test.check.generators/gen-fmap","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",15,"^1F",["^18",[["~$k","~$p__22542"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",53,"^1J","~$clojure.test.check.generators/Generator","^14",53,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["~$k",["^ ","~$h","^1P"]]]]]],"^1D","Internal function."],"^7",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1520,"^13",24,"^14",1520,"^15",28,"~:added","0.9.0"],"^1T","0.9.0","^J","~$clojure.test.check.generators/uuid","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",28,"^13",1,"^12",1520,"^14",1520,"~:tag","^1S","^1D","Generates a random type-4 UUID. Does not shrink."],"^8",["^ ","^[",null,"^10",["^ ","^1T","0.9.0","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",10,"~:top-fn",["^ ","^1I",false,"~:fixed-arity",2,"^1L",2,"^1F",[["^1="],["^1=","~$opts"]],"^17",["^18",[["^1="],["^1=","^1Y"]]],"^1H",["^18",[null,null]]],"^13",7,"^12",915,"^14",915,"^17",["^18",["^19",["^18",[["^1="],["^1=","^1Y"]]]]],"^1D","Generates a set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated set\n    :min-elements  the min size of generated set\n    :max-elements  the max size of generated set\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"],"^1T","0.9.0","^J","~$clojure.test.check.generators/set","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",10,"^1W",["^ ","^1I",false,"^1X",2,"^1L",2,"^1F",[["^1="],["^1=","^1Y"]],"^17",["^18",[["^1="],["^1=","^1Y"]]],"^1H",["^18",[null,null]]],"^1F",[["^1="],["^1=","^1Y"]],"^1G",null,"^1X",2,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"~:methods",[["^ ","^1X",1,"^1I",false,"^1V","~$any"],["^ ","^1X",2,"^1I",false,"^1V","^1S"]],"^12",915,"^14",915,"^1L",2,"^1M",true,"^17",["^18",[["^1="],["^1=","^1Y"]]],"^1D","Generates a set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated set\n    :min-elements  the min size of generated set\n    :max-elements  the max size of generated set\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"],"~$one-of",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",345,"^13",7,"^14",345,"^15",13,"^17",["^18",["^19",["^18",[["~$generators"]]]]],"^1D","Creates a generator that randomly chooses a value from the list of\n  provided generators. Shrinks toward choosing an earlier generator,\n  as well as shrinking the value generated by the chosen generator.\n\n      (gen/sample (gen/one-of [gen/small-integer gen/boolean (gen/vector gen/small-integer)]))\n      => (true [] -1 [0] [1 -4 -4 1] true 4 [] 6 true)"],"^J","~$clojure.test.check.generators/one-of","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",13,"^1F",["^18",[["^22"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",345,"^1J","^1S","^14",345,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^22"]]]]],"^1D","Creates a generator that randomly chooses a value from the list of\n  provided generators. Shrinks toward choosing an earlier generator,\n  as well as shrinking the value generated by the chosen generator.\n\n      (gen/sample (gen/one-of [gen/small-integer gen/boolean (gen/vector gen/small-integer)]))\n      => (true [] -1 [0] [1 -4 -4 1] true 4 [] 6 true)"],"~$uniform-integer",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1098,"^13",17,"^14",1098,"^15",32,"^16",true,"^17",["^18",["^19",["^18",[["~$bit-count"]]]]],"^1D","Generates an integer uniformly in the range 0..(2^bit-count-1)."],"^16",true,"^J","~$clojure.test.check.generators/uniform-integer","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",32,"^1F",["^18",[["^25"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1098,"^1J","^1S","^14",1098,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^25"]]]]],"^1D","Generates an integer uniformly in the range 0..(2^bit-count-1)."],"~$any-printable",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1700,"^13",6,"^14",1700,"^15",19],"^J","~$clojure.test.check.generators/any-printable","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",19,"^13",1,"^12",1700,"^14",1700,"^1V","^1S","^1D","Like any, but avoids characters that the shell will interpret as actions,\n  like 7 and 14 (bell and alternate character set command)"],"~$large-integer**",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1027,"^13",17,"^14",1027,"^15",32,"^16",true,"^17",["^18",["^19",["^18",[["~$min","~$max"]]]]],"^1D","Like large-integer*, but assumes range includes zero."],"^16",true,"^J","~$clojure.test.check.generators/large-integer**","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",32,"^1F",["^18",[["^2:","^2;"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1027,"^1J","^1S","^14",1027,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["^2:","^2;"]]]]],"^1D","Like large-integer*, but assumes range includes zero."],"~$MIN_NEG_VALUE",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1095,"^13",16,"^14",1095,"^15",29,"^16",true],"^16",true,"^J","~$clojure.test.check.generators/MIN_NEG_VALUE","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",29,"^13",1,"^12",1095,"^14",1095,"^1V","~$number"],"~$calc-long",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",225,"^13",8,"^14",225,"^15",17,"^16",true,"^17",["^18",["^19",["^18",[["~$factor","~$lower","~$upper"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/calc-long","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",17,"^1F",["^18",[["^2A","^2B","^2C"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",225,"^1J","^2?","^14",225,"^1L",3,"^1M",true,"^17",["^18",["^19",["^18",[["^2A","^2B","^2C"]]]]]],"~$vector-distinct",["^ ","^[",null,"^10",["^ ","^1T","0.9.0","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",22,"^1W",["^ ","^1I",false,"^1X",2,"^1L",2,"^1F",[["^1="],["^1=","^1Y"]],"^17",["^18",[["^1="],["^1=","^1Y"]]],"^1H",["^18",[null,null]]],"^13",7,"^12",815,"^14",815,"^17",["^18",["^19",["^18",[["^1="],["^1=","^1Y"]]]]],"^1D","Generates a vector of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"],"^1T","0.9.0","^J","~$clojure.test.check.generators/vector-distinct","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",22,"^1W",["^ ","^1I",false,"^1X",2,"^1L",2,"^1F",[["^1="],["^1=","^1Y"]],"^17",["^18",[["^1="],["^1=","^1Y"]]],"^1H",["^18",[null,null]]],"^1F",[["^1="],["^1=","^1Y"]],"^1G",null,"^1X",2,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^1[",[["^ ","^1X",1,"^1I",false,"^1V","^20"],["^ ","^1X",2,"^1I",false,"^1V","^1S"]],"^12",815,"^14",815,"^1L",2,"^1M",true,"^17",["^18",[["^1="],["^1=","^1Y"]]],"^1D","Generates a vector of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"],"~$double-exp-and-sign",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1165,"^13",17,"^14",1165,"^15",36,"^16",true,"^17",["^18",["^19",["^18",[["~$lower-bound","~$upper-bound"]]]]],"^1D","Generates [exp sign], where exp is in [-1023, 1023] and sign is 1\n  or -1. Only generates values for exp and sign for which there are\n  doubles within the given bounds."],"^16",true,"^J","~$clojure.test.check.generators/double-exp-and-sign","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",36,"^1F",["^18",[["^2H","^2I"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1165,"^14",1165,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["^2H","^2I"]]]]],"^1D","Generates [exp sign], where exp is in [-1023, 1023] and sign is 1\n  or -1. Only generates values for exp and sign for which there are\n  doubles within the given bounds."],"~$MIN_INTEGER",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",999,"^13",16,"^14",999,"^15",27,"^16",true],"^16",true,"^J","~$clojure.test.check.generators/MIN_INTEGER","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",27,"^13",1,"^12",999,"^14",999,"^1V","^2?"],"^:",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",518,"^13",6,"^14",518,"^15",13],"^J","~$clojure.test.check.generators/boolean","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",13,"^13",1,"^12",518,"^14",518,"^1V","^1S","^1D","Generates one of `true` or `false`. Shrinks to `false`."],"~$list-distinct",["^ ","^[",null,"^10",["^ ","^1T","0.9.0","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",20,"^1W",["^ ","^1I",false,"^1X",2,"^1L",2,"^1F",[["^1="],["^1=","^1Y"]],"^17",["^18",[["^1="],["^1=","^1Y"]]],"^1H",["^18",[null,null]]],"^13",7,"^12",840,"^14",840,"^17",["^18",["^19",["^18",[["^1="],["^1=","^1Y"]]]]],"^1D","Generates a list of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated list\n    :min-elements  the min size of generated list\n    :max-elements  the max size of generated list\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"],"^1T","0.9.0","^J","~$clojure.test.check.generators/list-distinct","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",20,"^1W",["^ ","^1I",false,"^1X",2,"^1L",2,"^1F",[["^1="],["^1=","^1Y"]],"^17",["^18",[["^1="],["^1=","^1Y"]]],"^1H",["^18",[null,null]]],"^1F",[["^1="],["^1=","^1Y"]],"^1G",null,"^1X",2,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^1[",[["^ ","^1X",1,"^1I",false,"^1V","^20"],["^ ","^1X",2,"^1I",false,"^1V","^1S"]],"^12",840,"^14",840,"^1L",2,"^1M",true,"^17",["^18",[["^1="],["^1=","^1Y"]]],"^1D","Generates a list of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated list\n    :min-elements  the min size of generated list\n    :max-elements  the max size of generated list\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"],"~$string-alphanumeric",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1430,"^13",6,"^14",1430,"^15",25],"^J","~$clojure.test.check.generators/string-alphanumeric","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",25,"^13",1,"^12",1430,"^14",1430,"^1V","^1S","^1D","Generates alphanumeric strings."],"^;",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",963,"^13",7,"^14",963,"^15",10,"^17",["^18",["^19",["^18",[["~$key-gen","~$val-gen"],["^2R","^2S","^1Y"]]]]],"^1D","Creates a generator that generates maps, with keys chosen from\n  `key-gen` and values chosen from `val-gen`.\n\n  If the key generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated maps\n    :min-elements  the min size of generated maps\n    :max-elements  the max size of generated maps\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct keys; it will be passed a map with\n                   `:gen` (the key-gen), `:num-elements`, and `:max-tries` and\n                   should return an exception","^1W",["^ ","^1I",false,"^1X",3,"^1L",3,"^1F",[["^2R","^2S"],["^2R","^2S","^1Y"]],"^17",["^18",[["^2R","^2S"],["^2R","^2S","^1Y"]]],"^1H",["^18",[null,null]]]],"^J","~$clojure.test.check.generators/map","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",10,"^1W",["^ ","^1I",false,"^1X",3,"^1L",3,"^1F",[["^2R","^2S"],["^2R","^2S","^1Y"]],"^17",["^18",[["^2R","^2S"],["^2R","^2S","^1Y"]]],"^1H",["^18",[null,null]]],"^1F",[["^2R","^2S"],["^2R","^2S","^1Y"]],"^1G",null,"^1X",3,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^1[",[["^ ","^1X",2,"^1I",false,"^1V","^20"],["^ ","^1X",3,"^1I",false,"^1V","^1S"]],"^12",963,"^14",963,"^1L",3,"^1M",true,"^17",["^18",[["^2R","^2S"],["^2R","^2S","^1Y"]]],"^1D","Creates a generator that generates maps, with keys chosen from\n  `key-gen` and values chosen from `val-gen`.\n\n  If the key generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated maps\n    :min-elements  the min size of generated maps\n    :max-elements  the max size of generated maps\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct keys; it will be passed a map with\n                   `:gen` (the key-gen), `:num-elements`, and `:max-tries` and\n                   should return an exception"],"~$simple-type",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1560,"^13",6,"^14",1560,"^15",17],"^J","~$clojure.test.check.generators/simple-type","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",17,"^13",1,"^12",1560,"^14",1560,"^1V","^1S","^1D","Generates a variety of scalar types."],"^<",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1379,"^13",6,"^14",1379,"^15",10],"^J","~$clojure.test.check.generators/char","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",10,"^13",1,"^12",1379,"^14",1379,"^1V","^1S","^1D","Generates character from 0-255."],"~$any-equatable",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1705,"^13",25,"^14",1705,"^15",38,"^1T","0.10.0"],"^1T","0.10.0","^J","~$clojure.test.check.generators/any-equatable","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",38,"^13",1,"^12",1705,"^14",1705,"^1V","^1S","^1D","Like any, but only generates objects that can be equal to other objects (e.g., do\n  not contain a NaN)"],"~$pos-int",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",561,"^13",30,"^14",561,"^15",37,"~:deprecated","0.10.0"],"^J","~$clojure.test.check.generators/pos-int","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",37,"^13",1,"^12",561,"^2[","0.10.0","^14",561,"^1V","^1S","^1D","Deprecated - use gen/nat instead (see also gen/large-integer).\n\n  (this generator, despite its name, can generate 0)\n\n  Generates nonnegative integers bounded by the generator's `size` parameter."],"~$bind",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",125,"^13",7,"^14",125,"^15",11,"^17",["^18",["^19",["^18",[["~$generator","~$f"]]]]],"^1D","Creates a new generator that passes the result of `gen` into function\n  `f`. `f` should return a new generator. This allows you to create new\n  generators that depend on the value of other generators. For example,\n  to create a generator of permutations which first generates a\n  `num-elements` and then generates a shuffling of `(range num-elements)`:\n\n      (gen/bind gen/nat\n                ;; this function takes a value generated by\n                ;; the generator above and returns a new generator\n                ;; which shuffles the collection returned by `range`\n                (fn [num-elements]\n                  (gen/shuffle (range num-elements))))\n\n  Also see gen/let for a macro with similar functionality."],"^J","~$clojure.test.check.generators/bind","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",11,"^1F",["^18",[["^32","~$f"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",125,"^1J","^1S","^14",125,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["^32","~$f"]]]]],"^1D","Creates a new generator that passes the result of `gen` into function\n  `f`. `f` should return a new generator. This allows you to create new\n  generators that depend on the value of other generators. For example,\n  to create a generator of permutations which first generates a\n  `num-elements` and then generates a shuffling of `(range num-elements)`:\n\n      (gen/bind gen/nat\n                ;; this function takes a value generated by\n                ;; the generator above and returns a new generator\n                ;; which shuffles the collection returned by `range`\n                (fn [num-elements]\n                  (gen/shuffle (range num-elements))))\n\n  Also see gen/let for a macro with similar functionality."],"~$symbol-ns",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1498,"^13",3,"^14",1498,"^15",12,"^1T","0.5.9"],"^1T","0.5.9","^J","~$clojure.test.check.generators/symbol-ns","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",12,"^13",1,"^12",1496,"^14",1498,"^1V","^1S","^1D","Generates symbols with namespaces."],"^20",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1696,"^13",6,"^14",1696,"^15",9],"^J","~$clojure.test.check.generators/any","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",9,"^13",1,"^12",1696,"^14",1696,"^1V","^1S","^1D","A recursive generator that will generate many different, often nested, values"],"~$hashable?",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1580,"^13",20,"^14",1580,"^15",29,"^16",true,"^17",["^18",["^19",["^18",[["~$x"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/hashable?","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",29,"^1F",["^18",[["~$x"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",4,"^1I",false,"^12",1580,"^1J","^:","^14",1580,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["~$x"]]]]]],"^=",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",638,"^13",3,"^14",638,"^15",10,"^1T","0.6.0","^17",["^18",["^19",["^18",[["~$coll"]]]]],"^1D","Creates a generator that generates random permutations of\n  `coll`. Shrinks toward the original collection: `coll`. `coll` will\n  be coerced to a vector."],"^1T","0.6.0","^J","~$clojure.test.check.generators/shuffle","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",10,"^1F",["^18",[["^39"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",636,"^1J","^1S","^14",638,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^39"]]]]],"^1D","Creates a generator that generates random permutations of\n  `coll`. Shrinks toward the original collection: `coll`. `coll` will\n  be coerced to a vector."],"~$container-type",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1588,"^13",7,"^14",1588,"^15",21,"^17",["^18",["^19",["^18",[["~$inner-type"]]]]]],"^J","~$clojure.test.check.generators/container-type","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",21,"^1F",["^18",[["^3<"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1588,"^1J","^1S","^14",1588,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^3<"]]]]]],"~$long->large-integer",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1006,"^13",17,"^14",1006,"^15",36,"^16",true,"^17",["^18",["^19",["^18",[["^25","~$x","^2:","^2;"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/long->large-integer","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",36,"^1F",["^18",[["^25","~$x","^2:","^2;"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1006,"^1J",["^6",["^20","^2?"]],"^14",1006,"^1L",4,"^1M",true,"^17",["^18",["^19",["^18",[["^25","~$x","^2:","^2;"]]]]]],"~$s-pos-int",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",577,"^13",30,"^14",577,"^15",39,"^2[","0.10.0"],"^J","~$clojure.test.check.generators/s-pos-int","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",39,"^13",1,"^12",577,"^2[","0.10.0","^14",577,"^1V","^1S","^1D","Deprecated - use (gen/fmap inc gen/nat) instead (see also gen/large-integer).\n\n  Generates positive integers bounded by the generator's `size` + 1"],"~$get-exponent",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1147,"^13",17,"^14",1147,"^15",29,"^16",true,"^17",["^18",["^19",["^18",[["~$x"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/get-exponent","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",29,"^1F",["^18",[["~$x"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1147,"^1J",["^6",["^20","^2?"]],"^14",1147,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["~$x"]]]]]],"^3",["^ ","^[",null,"^10",["^ ","^1T","0.9.0","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",14,"^1W",["^ ","^1I",true,"^1X",1,"^1L",1,"^1F",["^18",[["^18",["~$bindings","~$body"]]]],"^17",["^18",[["^3D","~$&","^3E"]]],"^1H",["^18",[null]]],"^13",11,"^12",1721,"~:macro",true,"^14",1721,"^17",["^18",["^19",["^18",[["^3D","~$&","^3E"]]]]],"^1D","Macro for building generators using values from other generators.\n  Uses a binding vector with the same syntax as clojure.core/let,\n  where the right-hand side of the binding pairs are generators, and\n  the left-hand side are names (or destructuring forms) for generated\n  values.\n\n  Subsequent generator expressions can refer to the previously bound\n  values, in the same way as clojure.core/let.\n\n  The body of the let can be either a value or a generator, and does\n  the expected thing in either case. In this way let provides the\n  functionality of both `bind` and `fmap`.\n\n  Examples:\n\n    (gen/let [strs (gen/not-empty (gen/list gen/string))\n              s (gen/elements strs)]\n      {:some-strings strs\n       :one-of-those-strings s})\n\n    ;; generates collections of \"users\" that have integer IDs\n    ;; from 0...N-1, but are in a random order\n    (gen/let [users (gen/list (gen/hash-map :name gen/string-ascii\n                                            :age gen/nat))]\n      (->> users\n           (map #(assoc %2 :id %1) (range))\n           (gen/shuffle)))"],"^1T","0.9.0","^J","~$clojure.test.check.generators/let","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",14,"^1W",["^ ","^1I",true,"^1X",1,"^1L",1,"^1F",["^18",[["^18",["^3D","^3E"]]]],"^17",["^18",[["^3D","~$&","^3E"]]],"^1H",["^18",[null]]],"^1F",["^18",[["^18",["^3D","^3E"]]]],"^1G",null,"^1X",1,"^1H",["^18",[null]],"^13",1,"^1I",true,"^1[",[["^ ","^1X",1,"^1I",true,"^1V",["^6",["~$seq","~$cljs.core/IList"]]]],"^12",1721,"^3F",true,"^1J","^20","^14",1721,"^1L",1,"^1M",false,"^17",["^18",[["^3D","~$&","^3E"]]],"^1D","Macro for building generators using values from other generators.\n  Uses a binding vector with the same syntax as clojure.core/let,\n  where the right-hand side of the binding pairs are generators, and\n  the left-hand side are names (or destructuring forms) for generated\n  values.\n\n  Subsequent generator expressions can refer to the previously bound\n  values, in the same way as clojure.core/let.\n\n  The body of the let can be either a value or a generator, and does\n  the expected thing in either case. In this way let provides the\n  functionality of both `bind` and `fmap`.\n\n  Examples:\n\n    (gen/let [strs (gen/not-empty (gen/list gen/string))\n              s (gen/elements strs)]\n      {:some-strings strs\n       :one-of-those-strings s})\n\n    ;; generates collections of \"users\" that have integer IDs\n    ;; from 0...N-1, but are in a random order\n    (gen/let [users (gen/list (gen/hash-map :name gen/string-ascii\n                                            :age gen/nat))]\n      (->> users\n           (map #(assoc %2 :id %1) (range))\n           (gen/shuffle)))"],"~$char-symbol-noninitial",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1411,"^13",16,"^14",1411,"^15",38,"^16",true],"^16",true,"^J","~$clojure.test.check.generators/char-symbol-noninitial","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",38,"^13",1,"^12",1411,"^14",1411,"^1V","^1S","^1D","Generates characters that can be the char following first of a keyword or symbol."],"~$any-printable-equatable",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1710,"^13",25,"^14",1710,"^15",48,"^1T","0.10.0"],"^1T","0.10.0","^J","~$clojure.test.check.generators/any-printable-equatable","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",48,"^13",1,"^12",1710,"^14",1710,"^1V","^1S","^1D","Like any, but avoids characters that the shell will interpret as actions,\n  like 7 and 14 (bell and alternate character set command), and only generates\n  objects that can be equal to other objects (e.g., do not contain a NaN)"],"^>",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1295,"^13",24,"^14",1295,"^15",30,"^1T","0.9.0"],"^1T","0.9.0","^J","~$clojure.test.check.generators/double","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",30,"^13",1,"^12",1295,"^14",1295,"^1V",["^6",["^20","^1S","~$clj-nil"]],"^1D","Generates 64-bit floating point numbers from the entire range,\n  including +/- infinity and NaN. Use double* for more control."],"~$MAX_POS_VALUE",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1094,"^13",16,"^14",1094,"^15",29,"^16",true],"^16",true,"^J","~$clojure.test.check.generators/MAX_POS_VALUE","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",29,"^13",1,"^12",1094,"^14",1094,"^1V","~$js/Number"],"~$list-distinct-by",["^ ","^[",null,"^10",["^ ","^1T","0.9.0","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",23,"^1W",["^ ","^1I",false,"^1X",3,"^1L",3,"^1F",[["^1;","^1="],["^1;","^1=","^1Y"]],"^17",["^18",[["^1;","^1="],["^1;","^1=","^1Y"]]],"^1H",["^18",[null,null]]],"^13",7,"^12",890,"^14",890,"^17",["^18",["^19",["^18",[["^1;","^1="],["^1;","^1=","^1Y"]]]]],"^1D","Generates a list of elements from the given generator, with the\n  guarantee that (map key-fn the-list) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated list\n    :min-elements  the min size of generated list\n    :max-elements  the max size of generated list\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"],"^1T","0.9.0","^J","~$clojure.test.check.generators/list-distinct-by","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",23,"^1W",["^ ","^1I",false,"^1X",3,"^1L",3,"^1F",[["^1;","^1="],["^1;","^1=","^1Y"]],"^17",["^18",[["^1;","^1="],["^1;","^1=","^1Y"]]],"^1H",["^18",[null,null]]],"^1F",[["^1;","^1="],["^1;","^1=","^1Y"]],"^1G",null,"^1X",3,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^1[",[["^ ","^1X",2,"^1I",false,"^1V","^20"],["^ ","^1X",3,"^1I",false,"^1V","^1S"]],"^12",890,"^14",890,"^1L",3,"^1M",true,"^17",["^18",[["^1;","^1="],["^1;","^1=","^1Y"]]],"^1D","Generates a list of elements from the given generator, with the\n  guarantee that (map key-fn the-list) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated list\n    :min-elements  the min size of generated list\n    :max-elements  the max size of generated list\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"],"~$simple-type-printable-equatable",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1573,"^13",25,"^14",1573,"^15",56,"^1T","0.10.0"],"^1T","0.10.0","^J","~$clojure.test.check.generators/simple-type-printable-equatable","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",56,"^13",1,"^12",1573,"^14",1573,"^1V","^1S","^1D","Like gen/simple-type-printable, but only generates objects that\n  can be equal to other objects (e.g., not a NaN)."],"~$block-bounds",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1207,"^13",17,"^14",1207,"^15",29,"^16",true,"^17",["^18",["^19",["^18",[["~$exp","~$sign"]]]]],"^1D","Returns [low high], the smallest and largest numbers in the given\n  range."],"^16",true,"^J","~$clojure.test.check.generators/block-bounds","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",29,"^1F",["^18",[["^3X","^3Y"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1207,"^1J","~$cljs.core/IVector","^14",1207,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["^3X","^3Y"]]]]],"^1D","Returns [low high], the smallest and largest numbers in the given\n  range."],"~$char-alpha",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1401,"^13",6,"^14",1401,"^15",16],"^J","~$clojure.test.check.generators/char-alpha","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",16,"^13",1,"^12",1401,"^14",1401,"^1V","^1S","^1D","Generates alpha characters."],"~$generator?",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",30,"^13",7,"^14",30,"^15",17,"^17",["^18",["^19",["^18",[["~$x"]]]]],"^1D","Test if `x` is a generator. Generators should be treated as opaque values."],"^J","~$clojure.test.check.generators/generator?","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",17,"^1F",["^18",[["~$x"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",30,"^1J","^:","^14",30,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["~$x"]]]]],"^1D","Test if `x` is a generator. Generators should be treated as opaque values."],"~$char-symbol-special",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1407,"^13",16,"^14",1407,"^15",35,"^16",true],"^16",true,"^J","~$clojure.test.check.generators/char-symbol-special","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",35,"^13",1,"^12",1407,"^14",1407,"^1V","^1S","^1D","Generates non-alphanumeric characters that can be in a symbol."],"~$sample-seq",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",153,"^13",7,"^14",153,"^15",17,"^17",["^18",["^19",["^18",[["^32"],["^32","~$max-size"]]]]],"^1D","Returns an infinite sequence of realized values from `generator`.\n\n  Note that this function is a dev helper and is not meant to be used\n  to build other generators.","^1W",["^ ","^1I",false,"^1X",2,"^1L",2,"^1F",[["^32"],["^32","^47"]],"^17",["^18",[["^32"],["^32","^47"]]],"^1H",["^18",[null,null]]]],"^J","~$clojure.test.check.generators/sample-seq","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",17,"^1W",["^ ","^1I",false,"^1X",2,"^1L",2,"^1F",[["^32"],["^32","^47"]],"^17",["^18",[["^32"],["^32","^47"]]],"^1H",["^18",[null,null]]],"^1F",[["^32"],["^32","^47"]],"^1G",null,"^1X",2,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^1[",[["^ ","^1X",1,"^1I",false,"^1V","^20"],["^ ","^1X",2,"^1I",false,"^1V","~$cljs.core/LazySeq"]],"^12",153,"^14",153,"^1L",2,"^1M",true,"^17",["^18",[["^32"],["^32","^47"]]],"^1D","Returns an infinite sequence of realized values from `generator`.\n\n  Note that this function is a dev helper and is not meant to be used\n  to build other generators."],"^?",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",554,"^13",30,"^14",554,"^15",33,"^2[","0.10.0"],"^J","~$clojure.test.check.generators/int","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",33,"^13",1,"^12",554,"^2[","0.10.0","^14",554,"^1V","^1S","^1D","Deprecated - use gen/small-integer instead.\n\n  Generates a positive or negative integer bounded by the generator's\n  `size` parameter."],"~$gen-pure",["^ ","^1O",true,"^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",45,"^13",7,"^14",45,"^15",15,"^17",["^18",["^19",["^18",[["~$value"]]]]],"^1D","Internal function.","^1O",true],"^J","~$clojure.test.check.generators/gen-pure","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",15,"^1F",["^18",[["^4<"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",45,"^1J","^1S","^14",45,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^4<"]]]]],"^1D","Internal function."],"~$recursive-gen",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1641,"^13",3,"^14",1641,"^15",16,"^1T","0.5.9","^17",["^18",["^19",["^18",[["~$container-gen-fn","~$scalar-gen"]]]]],"^1D","This is a helper for writing recursive (tree-shaped) generators. The first\n  argument should be a function that takes a generator as an argument, and\n  produces another generator that 'contains' that generator. The vector function\n  in this namespace is a simple example. The second argument is a scalar\n  generator, like boolean. For example, to produce a tree of booleans:\n\n    (gen/recursive-gen gen/vector gen/boolean)\n\n  Vectors or maps either recurring or containing booleans or integers:\n\n    (gen/recursive-gen (fn [inner] (gen/one-of [(gen/vector inner)\n                                                (gen/map inner inner)]))\n                       (gen/one-of [gen/boolean gen/small-integer]))\n\n  Note that raw scalar values will be generated as well. To prevent this, you\n  can wrap the returned generator with the function passed as the first arg,\n  e.g.:\n\n    (gen/vector (gen/recursive-gen gen/vector gen/boolean))"],"^1T","0.5.9","^J","~$clojure.test.check.generators/recursive-gen","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",16,"^1F",["^18",[["^4?","^4@"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1639,"^1J","^1S","^14",1641,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["^4?","^4@"]]]]],"^1D","This is a helper for writing recursive (tree-shaped) generators. The first\n  argument should be a function that takes a generator as an argument, and\n  produces another generator that 'contains' that generator. The vector function\n  in this namespace is a simple example. The second argument is a scalar\n  generator, like boolean. For example, to produce a tree of booleans:\n\n    (gen/recursive-gen gen/vector gen/boolean)\n\n  Vectors or maps either recurring or containing booleans or integers:\n\n    (gen/recursive-gen (fn [inner] (gen/one-of [(gen/vector inner)\n                                                (gen/map inner inner)]))\n                       (gen/one-of [gen/boolean gen/small-integer]))\n\n  Note that raw scalar values will be generated as well. To prevent this, you\n  can wrap the returned generator with the function passed as the first arg,\n  e.g.:\n\n    (gen/vector (gen/recursive-gen gen/vector gen/boolean))"],"~$char-alpha-numeric",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1395,"^13",3,"^14",1395,"^15",21,"^2[","0.6.0"],"^J","~$clojure.test.check.generators/char-alpha-numeric","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",21,"^13",1,"^12",1394,"^2[","0.6.0","^14",1395,"^1V","^1S","^1D","Deprecated - use char-alphanumeric instead.\n\n  Generates alphanumeric characters."],"~$backwards-shrinking-significand",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1138,"^13",16,"^14",1138,"^15",47,"^16",true],"^16",true,"^J","~$clojure.test.check.generators/backwards-shrinking-significand","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",47,"^13",1,"^12",1138,"^14",1138,"^1V","^1S","^1D","Generates a 52-bit non-negative integer that shrinks toward having\n  fewer lower-order bits (and shrinks to 0 if possible)."],"~$return",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",106,"^13",7,"^14",106,"^15",13,"^17",["^18",["^19",["^18",[["^4<"]]]]],"^1D","Creates a generator that always returns `value`,\n  and never shrinks. You can think of this as\n  the `constantly` of generators. E.g.:\n\n      (gen/sample (gen/return 42))\n      => (42 42 42 42 42 42 42 42 42 42)"],"^J","~$clojure.test.check.generators/return","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",13,"^1F",["^18",[["^4<"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",106,"^1J","^1S","^14",106,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^4<"]]]]],"^1D","Creates a generator that always returns `value`,\n  and never shrinks. You can think of this as\n  the `constantly` of generators. E.g.:\n\n      (gen/sample (gen/return 42))\n      => (42 42 42 42 42 42 42 42 42 42)"],"~$gen-bind",["^ ","^1O",true,"^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",61,"^13",7,"^14",61,"^15",15,"^17",["^18",["^19",["^18",[[["^ ","~$h","^1P"],"~$k"]]]]],"^1D","Internal function.","^1O",true],"^J","~$clojure.test.check.generators/gen-bind","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",15,"^1F",["^18",[["~$p__22545","~$k"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",61,"^1J","^1S","^14",61,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[[["^ ","~$h","^1P"],"~$k"]]]]],"^1D","Internal function."],"~$scale",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",302,"^13",7,"^14",302,"^15",12,"^17",["^18",["^19",["^18",[["~$f","^32"]]]]],"^1D","Creates a new generator that modifies the size parameter by the\n  given function. Intended to support generators with sizes that need\n  to grow at different rates compared to the normal linear scaling.\n\n      (gen/sample (gen/tuple (gen/scale #(/ % 10) gen/nat)\n                             gen/nat\n                             (gen/scale #(* % 10) gen/nat)))\n      => ([0 0 0]  [0 1 2]  [0 2 13] [0 1 6]  [0 1 23]\n          [0 2 42] [0 1 26] [0 1 12] [0 1 12] [0 0 3])","^1T","0.8.0"],"^1T","0.8.0","^J","~$clojure.test.check.generators/scale","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",12,"^1F",["^18",[["~$f","^32"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",302,"^1J","^1S","^14",302,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["~$f","^32"]]]]],"^1D","Creates a new generator that modifies the size parameter by the\n  given function. Intended to support generators with sizes that need\n  to grow at different rates compared to the normal linear scaling.\n\n      (gen/sample (gen/tuple (gen/scale #(/ % 10) gen/nat)\n                             gen/nat\n                             (gen/scale #(* % 10) gen/nat)))\n      => ([0 0 0]  [0 1 2]  [0 2 13] [0 1 6]  [0 1 23]\n          [0 2 42] [0 1 26] [0 1 12] [0 1 12] [0 0 3])"],"~$+-or---digit?",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1446,"^13",8,"^14",1446,"^15",21,"^16",true,"^17",["^18",["^19",["^18",[["~$c","~$d"]]]]],"^1D","Returns true if c is \\+ or \\- and d is non-nil and a digit.\n\n  Symbols that start with +3 or -2 are not readable because they look\n  like numbers."],"^16",true,"^J","~$clojure.test.check.generators/+-or---digit?","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",21,"^1F",["^18",[["~$c","~$d"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1446,"^1J","^:","^14",1446,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["~$c","~$d"]]]]],"^1D","Returns true if c is \\+ or \\- and d is non-nil and a digit.\n\n  Symbols that start with +3 or -2 are not readable because they look\n  like numbers."],"^@",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1488,"^13",6,"^14",1488,"^15",12],"^J","~$clojure.test.check.generators/symbol","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",12,"^13",1,"^12",1488,"^14",1488,"^1V","^1S","^1D","Generates symbols without namespaces."],"~$such-that-helper",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",419,"^13",8,"^14",419,"^15",24,"^16",true,"^17",["^18",["^19",["^18",[["~$pred","^1=",["^ ","~:keys",["^1C","^1B"]],"^1>","^1?"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/such-that-helper","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",24,"^1F",["^18",[["^4Q","^1=","~$p__22589","^1>","^1?"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",419,"^1J","^1K","^14",419,"^1L",5,"^1M",true,"^17",["^18",["^19",["^18",[["^4Q","^1=",["^ ","^4R",["^1C","^1B"]],"^1>","^1?"]]]]]],"~$double-finite",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1219,"^13",17,"^14",1219,"^15",30,"^16",true,"^17",["^18",["^19",["^18",[["^2H","^2I"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/double-finite","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",30,"^1F",["^18",[["^2H","^2I"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1219,"^1J",["^6",["^20","^1S"]],"^14",1219,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["^2H","^2I"]]]]]],"~$pick",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",360,"^13",8,"^14",360,"^15",12,"^16",true,"^17",["^18",["^19",["^18",[["~$likelihoods","~$n"]]]]],"^1D","Returns an index into the `likelihoods` sequence."],"^16",true,"^J","~$clojure.test.check.generators/pick","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",12,"^1F",["^18",[["^4X","~$n"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",360,"^1J","^2?","^14",360,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["^4X","~$n"]]]]],"^1D","Returns an index into the `likelihoods` sequence."],"~$char-symbol-initial",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1417,"^13",16,"^14",1417,"^15",35,"^16",true],"^16",true,"^J","~$clojure.test.check.generators/char-symbol-initial","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",35,"^13",1,"^12",1417,"^14",1417,"^1V","^1S","^1D","Generates characters that can be the first char of a keyword or symbol."],"~$char-alphanumeric",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1387,"^13",6,"^14",1387,"^15",23],"^J","~$clojure.test.check.generators/char-alphanumeric","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",23,"^13",1,"^12",1387,"^14",1387,"^1V","^1S","^1D","Generates alphanumeric characters."],"~$make-size-range-seq",["^ ","^1O",true,"^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",147,"^13",7,"^14",147,"^15",26,"^17",["^18",["^19",["^18",[["^47"]]]]],"^1D","Internal function.","^1O",true],"^J","~$clojure.test.check.generators/make-size-range-seq","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",26,"^1F",["^18",[["^47"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",147,"^1J",["^6",["^20","~$cljs.core/Cycle"]],"^14",147,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^47"]]]]],"^1D","Internal function."],"~$choose",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",316,"^13",7,"^14",316,"^15",13,"^17",["^18",["^19",["^18",[["^2B","^2C"]]]]],"^1D","Creates a generator that generates integer numbers uniformly in\n     the range `lower` to `upper`, inclusive.\n\n         (gen/sample (gen/choose 200 800))\n         => (331 241 593 339 643 718 688 473 247 694)"],"^J","~$clojure.test.check.generators/choose","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",13,"^1F",["^18",[["^2B","^2C"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",316,"^1J","^1S","^14",316,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["^2B","^2C"]]]]],"^1D","Creates a generator that generates integer numbers uniformly in\n     the range `lower` to `upper`, inclusive.\n\n         (gen/sample (gen/choose 200 800))\n         => (331 241 593 339 643 718 688 473 247 694)"],"~$string-ascii",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1426,"^13",6,"^14",1426,"^15",18],"^J","~$clojure.test.check.generators/string-ascii","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",18,"^13",1,"^12",1426,"^14",1426,"^1V","^1S","^1D","Generates ascii strings."],"^A",["^ ","^[",null,"^10",["^ ","^1T","0.9.0","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",17,"^1W",["^ ","^1I",false,"^1X",2,"^1L",2,"^1F",[["^1="],["^1=","^1Y"]],"^17",["^18",[["^1="],["^1=","^1Y"]]],"^1H",["^18",[null,null]]],"^13",7,"^12",939,"^14",939,"^17",["^18",["^19",["^18",[["^1="],["^1=","^1Y"]]]]],"^1D","Generates a sorted set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated set\n    :min-elements  the min size of generated set\n    :max-elements  the max size of generated set\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"],"^1T","0.9.0","^J","~$clojure.test.check.generators/sorted-set","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",17,"^1W",["^ ","^1I",false,"^1X",2,"^1L",2,"^1F",[["^1="],["^1=","^1Y"]],"^17",["^18",[["^1="],["^1=","^1Y"]]],"^1H",["^18",[null,null]]],"^1F",[["^1="],["^1=","^1Y"]],"^1G",null,"^1X",2,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^1[",[["^ ","^1X",1,"^1I",false,"^1V","^20"],["^ ","^1X",2,"^1I",false,"^1V","^1S"]],"^12",939,"^14",939,"^1L",2,"^1M",true,"^17",["^18",[["^1="],["^1=","^1Y"]]],"^1D","Generates a sorted set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated set\n    :min-elements  the min size of generated set\n    :max-elements  the max size of generated set\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"],"~$make-gen",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",35,"^13",8,"^14",35,"^15",16,"^16",true,"^17",["^18",["^19",["^18",[["~$generator-fn"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/make-gen","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",16,"^1F",["^18",[["^5;"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",35,"^1J","^1S","^14",35,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^5;"]]]]]],"~$Generator",["^ ","~:num-fields",1,"~:protocols",["^6",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^J","^1S","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",21,"~:type",true,"^13",12,"~:internal-ctor",true,"^12",28,"~:record",true,"^14",28,"^1V","~$function","~:skip-protocol-flag",["^6",["^5@","^5A","^5B","^5C","^5D","^5E","^5F","^5G","^5H","^5I","^5J","^5K","^5L","^5M","^5N"]]],"~$frequency",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",369,"^13",7,"^14",369,"^15",16,"^17",["^18",["^19",["^18",[["~$pairs"]]]]],"^1D","Creates a generator that chooses a generator from `pairs` based on the\n  provided likelihoods. The likelihood of a given generator being chosen is\n  its likelihood divided by the sum of all likelihoods. Shrinks toward\n  choosing an earlier generator, as well as shrinking the value generated\n  by the chosen generator.\n\n  Examples:\n\n      (gen/sample (gen/frequency [[5 gen/small-integer] [3 (gen/vector gen/small-integer)] [2 gen/boolean]]))\n      => (true [] -1 [0] [1 -4 -4 1] true 4 [] 6 true)"],"^J","~$clojure.test.check.generators/frequency","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",16,"^1F",["^18",[["^5U"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",369,"^1J","^1S","^14",369,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^5U"]]]]],"^1D","Creates a generator that chooses a generator from `pairs` based on the\n  provided likelihoods. The likelihood of a given generator being chosen is\n  its likelihood divided by the sum of all likelihoods. Shrinks toward\n  choosing an earlier generator, as well as shrinking the value generated\n  by the chosen generator.\n\n  Examples:\n\n      (gen/sample (gen/frequency [[5 gen/small-integer] [3 (gen/vector gen/small-integer)] [2 gen/boolean]]))\n      => (true [] -1 [0] [1 -4 -4 1] true 4 [] 6 true)"],"~$small-integer",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",547,"^13",25,"^14",547,"^15",38,"^1T","0.10.0"],"^1T","0.10.0","^J","~$clojure.test.check.generators/small-integer","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",38,"^13",1,"^12",547,"^14",547,"^1V","^1S","^1D","Generates a positive or negative integer bounded by the generator's\n  `size` parameter. Shrinks to zero."],"~$double*",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1253,"^13",7,"^14",1253,"^15",14,"^17",["^18",["^19",["^18",[[["^ ","^4R",["~$infinite?","~$NaN?","^2:","^2;"],"~:or",["^ ","^5Z",true,"^5[",true]]]]]]],"^1D","Generates a 64-bit floating point number. Options:\n\n    :infinite? - whether +/- infinity can be generated (default true)\n    :NaN?      - whether NaN can be generated (default true)\n    :min       - minimum value (inclusive, default none)\n    :max       - maximum value (inclusive, default none)\n\n  Note that the min/max options must be finite numbers. Supplying a\n  min precludes -Infinity, and supplying a max precludes +Infinity.","^1T","0.9.0"],"^1T","0.9.0","^J","~$clojure.test.check.generators/double*","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",14,"^1F",["^18",[["~$p__22730"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1253,"^1J",["^6",["^20","^1S","^3O"]],"^14",1253,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[[["^ ","^4R",["^5Z","^5[","^2:","^2;"],"^60",["^ ","^5Z",true,"^5[",true]]]]]]],"^1D","Generates a 64-bit floating point number. Options:\n\n    :infinite? - whether +/- infinity can be generated (default true)\n    :NaN?      - whether NaN can be generated (default true)\n    :min       - minimum value (inclusive, default none)\n    :max       - maximum value (inclusive, default none)\n\n  Note that the min/max options must be finite numbers. Supplying a\n  min precludes -Infinity, and supplying a max precludes +Infinity."],"~$generate",["^ ","^[",null,"^10",["^ ","^1T","0.8.0","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",15,"^1W",["^ ","^1I",false,"^1X",3,"^1L",3,"^1F",[["^32"],["^32","^1?"],["^32","^1?","~$seed"]],"^17",["^18",[["^32"],["^32","^1?"],["^32","^1?","^64"]]],"^1H",["^18",[null,null,null]]],"^13",7,"^12",182,"^14",182,"^17",["^18",["^19",["^18",[["^32"],["^32","^1?"],["^32","^1?","^64"]]]]],"^1D","Returns a single sample value from the generator.\n\n  Note that this function is a dev helper and is not meant to be used\n  to build other generators.\n\n  Optional args:\n\n  - size: the abstract size parameter, defaults to 30\n  - seed: the seed for the random number generator, an integer"],"^1T","0.8.0","^J","~$clojure.test.check.generators/generate","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",15,"^1W",["^ ","^1I",false,"^1X",3,"^1L",3,"^1F",[["^32"],["^32","^1?"],["^32","^1?","^64"]],"^17",["^18",[["^32"],["^32","^1?"],["^32","^1?","^64"]]],"^1H",["^18",[null,null,null]]],"^1F",[["^32"],["^32","^1?"],["^32","^1?","^64"]],"^1G",null,"^1X",3,"^1H",["^18",[null,null,null]],"^13",1,"^1I",false,"^1[",[["^ ","^1X",1,"^1I",false,"^1V","^20"],["^ ","^1X",2,"^1I",false,"^1V","^20"],["^ ","^1X",3,"^1I",false,"^1V","^20"]],"^12",182,"^14",182,"^1L",3,"^1M",true,"^17",["^18",[["^32"],["^32","^1?"],["^32","^1?","^64"]]],"^1D","Returns a single sample value from the generator.\n\n  Note that this function is a dev helper and is not meant to be used\n  to build other generators.\n\n  Optional args:\n\n  - size: the abstract size parameter, defaults to 30\n  - seed: the seed for the random number generator, an integer"],"~$distinct-by?",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",744,"^13",17,"^14",744,"^15",29,"^16",true,"^17",["^18",["^19",["^18",[["~$f","^39"]]]]],"^1D","Like clojure.core/distinct? but takes a collection instead of varargs,\n  and returns true for empty collections."],"^16",true,"^J","~$clojure.test.check.generators/distinct-by?","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",29,"^1F",["^18",[["~$f","^39"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",744,"^1J",["^6",["^:","^20"]],"^14",744,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["~$f","^39"]]]]],"^1D","Like clojure.core/distinct? but takes a collection instead of varargs,\n  and returns true for empty collections."],"~$sized",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",251,"^13",7,"^14",251,"^15",12,"^17",["^18",["^19",["^18",[["~$sized-gen"]]]]],"^1D","Creates a generator that depends on the size parameter.\n  `sized-gen` is a function that takes an integer and returns\n  a generator.\n\n  Examples:\n\n      ;; generates vectors of booleans where the length always exactly\n      ;; matches the `size` parameter\n      (gen/sample (gen/sized (fn [size] (gen/vector gen/boolean size))))\n      => ([]\n          [false]\n          [true true]\n          [false true false]\n          [false true true true]\n          [false false true true false]\n          [false true false true true false]\n          [true false true true true false false]\n          [true true false false false true false false]\n          [false false false true true false true false true])"],"^J","~$clojure.test.check.generators/sized","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",12,"^1F",["^18",[["^69"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",251,"^1J","^1S","^14",251,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^69"]]]]],"^1D","Creates a generator that depends on the size parameter.\n  `sized-gen` is a function that takes an integer and returns\n  a generator.\n\n  Examples:\n\n      ;; generates vectors of booleans where the length always exactly\n      ;; matches the `size` parameter\n      (gen/sample (gen/sized (fn [size] (gen/vector gen/boolean size))))\n      => ([]\n          [false]\n          [true true]\n          [false true false]\n          [false true true true]\n          [false false true true false]\n          [false true false true true false]\n          [true false true true true false false]\n          [true true false false false true false false]\n          [false false false true true false true false true])"],"~$s-neg-int",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",583,"^13",30,"^14",583,"^15",39,"^2[","0.10.0"],"^J","~$clojure.test.check.generators/s-neg-int","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",39,"^13",1,"^12",583,"^2[","0.10.0","^14",583,"^1V","^1S","^1D","Deprecated - use (gen/fmap (comp dec -) gen/nat) instead (see also gen/large-integer).\n\n  Generates negative integers bounded by the generator's `size` + 1"],"~$nat",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",540,"^13",6,"^14",540,"^15",9],"^J","~$clojure.test.check.generators/nat","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",9,"^13",1,"^12",540,"^14",540,"^1V","^1S","^1D","Generates non-negative integers bounded by the generator's `size`\n  parameter. Shrinks to zero."],"~$simple-type-equatable",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1568,"^13",25,"^14",1568,"^15",46,"^1T","0.10.0"],"^1T","0.10.0","^J","~$clojure.test.check.generators/simple-type-equatable","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",46,"^13",1,"^12",1568,"^14",1568,"^1V","^1S","^1D","Like gen/simple-type, but only generates objects that can be\n  equal to other objects (e.g., not a NaN)."],"~$coll-distinct-by",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",769,"^13",17,"^14",769,"^15",33,"^16",true,"^17",["^18",["^19",["^18",[["^1:","^1;","~$allows-dupes?","~$ordered?","^1=",["^ ","^4R",["^1@","^1A","~$max-elements","^1B","^1C"],"^60",["^ ","^1B",10,"^1C",["^18",["~$fn*",["~$p1__22655#"],["^18",["~$ex-info","Couldn't generate enough distinct elements!","^6F"]]]]]]]]]]]],"^16",true,"^J","~$clojure.test.check.generators/coll-distinct-by","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",33,"^1F",["^18",[["^1:","^1;","^6B","^6C","^1=","~$p__22662"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",769,"^1J","^1S","^14",769,"^1L",6,"^1M",true,"^17",["^18",["^19",["^18",[["^1:","^1;","^6B","^6C","^1=",["^ ","^4R",["^1@","^1A","^6D","^1B","^1C"],"^60",["^ ","^1B",10,"^1C",["^18",["^6E",["^6F"],["^18",["^6G","Couldn't generate enough distinct elements!","^6F"]]]]]]]]]]]],"~$resize-symbolish-generator",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1467,"^13",17,"^14",1467,"^15",43,"^16",true,"^17",["^18",["^19",["^18",[["~$g"]]]]],"^1D","Scales the sizing down on a keyword or symbol generator so as to\n  make it reasonable."],"^16",true,"^J","~$clojure.test.check.generators/resize-symbolish-generator","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",43,"^1F",["^18",[["~$g"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1467,"^1J","^1S","^14",1467,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["~$g"]]]]],"^1D","Scales the sizing down on a keyword or symbol generator so as to\n  make it reasonable."],"~$the-shuffle-fn",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",751,"^13",17,"^14",751,"^15",31,"^16",true,"^17",["^18",["^19",["^18",[["^1>","^39"]]]]],"^1D","Returns a shuffled version of coll according to the rng.\n\n  Note that this is not a generator, it is just a utility function."],"^16",true,"^J","~$clojure.test.check.generators/the-shuffle-fn","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",31,"^1F",["^18",[["^1>","^39"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",751,"^1J",["^6",[null,"~$clj","^20"]],"^14",751,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["^1>","^39"]]]]],"^1D","Returns a shuffled version of coll according to the rng.\n\n  Note that this is not a generator, it is just a utility function."],"~$tuple",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",522,"^13",7,"^14",522,"^15",12,"^17",["^18",["^19",["^18",[["~$&","^22"]]]]],"^1D","Creates a generator that returns a vector, whose elements are chosen\n  from the generators in the same position. The individual elements shrink\n  according to their generator, but the vector will never shrink in count.\n\n  Examples:\n\n      (def t (gen/tuple gen/small-integer gen/boolean))\n      (sample t)\n      ;; => ([1 true] [2 true] [2 false] [1 false] [0 true] [-2 false] [-6 false]\n      ;; =>  [3 true] [-4 false] [9 true]))","^1W",["^ ","^1I",true,"^1X",0,"^1L",0,"^1F",[["^18",["^22"]]],"^17",["^18",[["~$&","^22"]]],"^1H",["^18",[null]]]],"^J","~$clojure.test.check.generators/tuple","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",12,"^1W",["^ ","^1I",true,"^1X",0,"^1L",0,"^1F",[["^18",["^22"]]],"^17",["^18",[["~$&","^22"]]],"^1H",["^18",[null]]],"^1F",[["^18",["^22"]]],"^1G",null,"^1X",0,"^1H",["^18",[null]],"^13",1,"^1I",true,"^1[",[["^ ","^1X",0,"^1I",true,"^1V","^1S"]],"^12",522,"^1J","^20","^14",522,"^1L",0,"^1M",true,"^17",["^18",[["~$&","^22"]]],"^1D","Creates a generator that returns a vector, whose elements are chosen\n  from the generators in the same position. The individual elements shrink\n  according to their generator, but the vector will never shrink in count.\n\n  Examples:\n\n      (def t (gen/tuple gen/small-integer gen/boolean))\n      (sample t)\n      ;; => ([1 true] [2 true] [2 false] [1 false] [0 true] [-2 false] [-6 false]\n      ;; =>  [3 true] [-4 false] [9 true]))"],"~$lazy-random-states",["^ ","^1O",true,"^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",72,"^13",7,"^14",72,"^15",25,"^17",["^18",["^19",["^18",[["~$rr"]]]]],"^1D","Internal function.\n\n  Given a random number generator, returns an infinite lazy sequence\n  of random number generators.","^1O",true],"^J","~$clojure.test.check.generators/lazy-random-states","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",25,"^1F",["^18",[["^6R"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",72,"^1J","^49","^14",72,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^6R"]]]]],"^1D","Internal function.\n\n  Given a random number generator, returns an infinite lazy sequence\n  of random number generators."],"~$map->Generator",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",21,"^13",12,"^5P",true,"~:factory","~:map","^12",28,"^14",28,"^17",["^18",["^19",["^18",[["~$G__22528"]]]]],"^1D","Factory function for clojure.test.check.generators/Generator, taking a map of keywords to field values."],"^J","~$clojure.test.check.generators/map->Generator","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",21,"^1F",["^18",[["^6W"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^5P",true,"^1I",false,"^6U","^6V","^12",28,"^1J","^1S","^14",28,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^6W"]]]]],"^1D","Factory function for clojure.test.check.generators/Generator, taking a map of keywords to field values."],"~$shrink-2",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",511,"^13",7,"^14",511,"^15",15,"^17",["^18",["^19",["^18",[["^1="]]]]],"^1D","Creates a new generator like `gen`, but will consider nodes for shrinking\n  even if their parent passes the test (up to one additional level)."],"^J","~$clojure.test.check.generators/shrink-2","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",15,"^1F",["^18",[["^1="]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",511,"^1J","^1S","^14",511,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^1="]]]]],"^1D","Creates a new generator like `gen`, but will consider nodes for shrinking\n  even if their parent passes the test (up to one additional level)."],"~$string-alpha-numeric",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1435,"^13",3,"^14",1435,"^15",23,"^2[","0.6.0"],"^J","~$clojure.test.check.generators/string-alpha-numeric","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",23,"^13",1,"^12",1434,"^2[","0.6.0","^14",1435,"^1V","^1S","^1D","Deprecated - use string-alphanumeric instead.\n\n  Generates alphanumeric strings."],"~$resize",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",280,"^13",7,"^14",280,"^15",13,"^17",["^18",["^19",["^18",[["~$n","^32"]]]]],"^1D","Creates a new generator with `size` always bound to `n`.\n\n      (gen/sample (gen/set (gen/resize 200 gen/double)))\n      => (#{}\n          #{-4.994772362980037E147}\n          #{-4.234418056487335E-146}\n          #{}\n          #{}\n          #{}\n          #{NaN}\n          #{8.142414100982609E-63}\n          #{-3.58429955903876E-159 2.8563794617604296E-154\n            4.1021360195776005E-100 1.9084564045332549E-38}\n          #{-2.1582818131881376E83 -5.8460065493236117E48 9.729260993803226E166})"],"^J","~$clojure.test.check.generators/resize","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",13,"^1F",["^18",[["~$n","^32"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",280,"^1J","^1S","^14",280,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["~$n","^32"]]]]],"^1D","Creates a new generator with `size` always bound to `n`.\n\n      (gen/sample (gen/set (gen/resize 200 gen/double)))\n      => (#{}\n          #{-4.994772362980037E147}\n          #{-4.234418056487335E-146}\n          #{}\n          #{}\n          #{}\n          #{NaN}\n          #{8.142414100982609E-63}\n          #{-3.58429955903876E-159 2.8563794617604296E-154\n            4.1021360195776005E-100 1.9084564045332549E-38}\n          #{-2.1582818131881376E83 -5.8460065493236117E48 9.729260993803226E166})"],"~$digit?",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1441,"^13",8,"^14",1441,"^15",14,"^16",true,"^17",["^18",["^19",["^18",[["~$d"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/digit?","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",14,"^1F",["^18",[["~$d"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1441,"^1J","^:","^14",1441,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["~$d"]]]]]],"~$scalb",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1117,"^13",17,"^14",1117,"^15",22,"^16",true,"^17",["^18",["^19",["^18",[["~$x","^3X"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/scalb","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",22,"^1F",["^18",[["~$x","^3X"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1117,"^1J","^2?","^14",1117,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["~$x","^3X"]]]]]],"~$neg-int",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",569,"^13",30,"^14",569,"^15",37,"^2[","0.10.0"],"^J","~$clojure.test.check.generators/neg-int","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",37,"^13",1,"^12",569,"^2[","0.10.0","^14",569,"^1V","^1S","^1D","Deprecated - use (gen/fmap - gen/nat) instead (see also gen/large-integer).\n\n  (this generator, despite its name, can generate 0)\n\n  Generates nonpositive integers bounded by the generator's `size` parameter."],"^S",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1422,"^13",6,"^14",1422,"^15",12],"^J","~$clojure.test.check.generators/string","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",12,"^13",1,"^12",1422,"^14",1422,"^1V","^1S","^1D","Generates strings. May generate unprintable characters."],"^B",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",589,"^13",7,"^14",589,"^15",13,"^17",["^18",["^19",["^18",[["^32"],["^32","^1@"],["^32","^1A","^6D"]]]]],"^1D","Creates a generator of vectors whose elements are chosen from\n  `generator`. The count of the vector will be bounded by the `size`\n  generator parameter.","^1W",["^ ","^1I",false,"^1X",3,"^1L",3,"^1F",[["^32"],["^32","^1@"],["^32","^1A","^6D"]],"^17",["^18",[["^32"],["^32","^1@"],["^32","^1A","^6D"]]],"^1H",["^18",[null,null,null]]]],"^J","~$clojure.test.check.generators/vector","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",13,"^1W",["^ ","^1I",false,"^1X",3,"^1L",3,"^1F",[["^32"],["^32","^1@"],["^32","^1A","^6D"]],"^17",["^18",[["^32"],["^32","^1@"],["^32","^1A","^6D"]]],"^1H",["^18",[null,null,null]]],"^1F",[["^32"],["^32","^1@"],["^32","^1A","^6D"]],"^1G",null,"^1X",3,"^1H",["^18",[null,null,null]],"^13",1,"^1I",false,"^1[",[["^ ","^1X",1,"^1I",false,"^1V","^1S"],["^ ","^1X",2,"^1I",false,"^1V","^20"],["^ ","^1X",3,"^1I",false,"^1V","^1S"]],"^12",589,"^14",589,"^1L",3,"^1M",true,"^17",["^18",[["^32"],["^32","^1@"],["^32","^1A","^6D"]]],"^1D","Creates a generator of vectors whose elements are chosen from\n  `generator`. The count of the vector will be bounded by the `size`\n  generator parameter."],"~$large-integer",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1061,"^13",24,"^14",1061,"^15",37,"^1T","0.9.0"],"^1T","0.9.0","^J","~$clojure.test.check.generators/large-integer","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",37,"^13",1,"^12",1061,"^14",1061,"^1V","^20","^1D","Generates a platform-native integer from the full available range\n  (in clj, 64-bit Longs, and in cljs, numbers between -(2^53 - 1) and\n  (2^53 - 1)).\n\n  Use large-integer* for more control."],"~$keyword-ns",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1482,"^13",3,"^14",1482,"^15",13,"^1T","0.5.9"],"^1T","0.5.9","^J","~$clojure.test.check.generators/keyword-ns","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",13,"^13",1,"^12",1480,"^14",1482,"^1V","^1S","^1D","Generates keywords with namespaces."],"^C",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",480,"^13",7,"^14",480,"^15",16,"^17",["^18",["^19",["^18",[["^1="]]]]],"^1D","Modifies a generator so that it doesn't generate empty collections.\n\n  Examples:\n\n      ;; generate a vector of booleans, but never the empty vector\n      (gen/sample (gen/not-empty (gen/vector gen/boolean)))\n      => ([false]\n          [false false]\n          [false false]\n          [false false false]\n          [false false false false]\n          [false true true]\n          [true false false false]\n          [true]\n          [true true true false false true false]\n          [false true true true false true true true false])"],"^J","~$clojure.test.check.generators/not-empty","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",16,"^1F",["^18",[["^1="]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",480,"^1J","^20","^14",480,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^1="]]]]],"^1D","Modifies a generator so that it doesn't generate empty collections.\n\n  Examples:\n\n      ;; generate a vector of booleans, but never the empty vector\n      (gen/sample (gen/not-empty (gen/vector gen/boolean)))\n      => ([false]\n          [false false]\n          [false false]\n          [false false false]\n          [false false false false]\n          [false true true]\n          [true false false false]\n          [true]\n          [true true true false false true false]\n          [false true true true false true true true false])"],"~$gen-raw-long",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",992,"^13",16,"^14",992,"^15",28,"^16",true],"^16",true,"^J","~$clojure.test.check.generators/gen-raw-long","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",28,"^13",1,"^12",992,"^14",992,"^1V","^1S","^1D","Generates a single uniformly random long, does not shrink."],"~$NAN",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1096,"^13",16,"^14",1096,"^15",19,"^16",true],"^16",true,"^J","~$clojure.test.check.generators/NAN","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",19,"^13",1,"^12",1096,"^14",1096,"^1V","^3R"],"~$elements",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",408,"^13",7,"^14",408,"^15",15,"^17",["^18",["^19",["^18",[["^39"]]]]],"^1D","Creates a generator that randomly chooses an element from `coll`.\n\n      (gen/sample (gen/elements [:foo :bar :baz]))\n      => (:foo :baz :baz :bar :foo :foo :bar :bar :foo :bar)"],"^J","~$clojure.test.check.generators/elements","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",15,"^1F",["^18",[["^39"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",408,"^1J","^1S","^14",408,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^39"]]]]],"^1D","Creates a generator that randomly chooses an element from `coll`.\n\n      (gen/sample (gen/elements [:foo :bar :baz]))\n      => (:foo :baz :baz :bar :foo :foo :bar :bar :foo :bar)"],"~$default-such-that-opts",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",433,"^13",3,"^14",433,"^15",25,"^16",true],"^16",true,"^J","~$clojure.test.check.generators/default-such-that-opts","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",25,"^13",1,"^12",432,"^14",433,"^1V","^5M"],"~$fifty-two-bit-reverse",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1122,"^13",17,"^14",1122,"^15",38,"^16",true,"^17",["^18",["^19",["^18",[["~$n"]]]]],"^1D","Bit-reverses an integer in the range [0, 2^52)."],"^16",true,"^J","~$clojure.test.check.generators/fifty-two-bit-reverse","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",38,"^1F",["^18",[["~$n"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1122,"^1J","^2?","^14",1122,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["~$n"]]]]],"^1D","Bit-reverses an integer in the range [0, 2^52)."],"~$POS_INFINITY",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1092,"^13",16,"^14",1092,"^15",28,"^16",true],"^16",true,"^J","~$clojure.test.check.generators/POS_INFINITY","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",28,"^13",1,"^12",1092,"^14",1092,"^1V","^3R"],"~$sample",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",166,"^13",7,"^14",166,"^15",13,"^17",["^18",["^19",["^18",[["^32"],["^32","~$num-samples"]]]]],"^1D","Return a sequence of `num-samples` (default 10)\n  realized values from `generator`.\n\n  The sequence starts with small values from the generator, which\n  probably do not reflect the variety of values that will be generated\n  during a longer test run.\n\n  Note that this function is a dev helper and is not meant to be used\n  to build other generators.","^1W",["^ ","^1I",false,"^1X",2,"^1L",2,"^1F",[["^32"],["^32","^7M"]],"^17",["^18",[["^32"],["^32","^7M"]]],"^1H",["^18",[null,null]]]],"^J","~$clojure.test.check.generators/sample","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",13,"^1W",["^ ","^1I",false,"^1X",2,"^1L",2,"^1F",[["^32"],["^32","^7M"]],"^17",["^18",[["^32"],["^32","^7M"]]],"^1H",["^18",[null,null]]],"^1F",[["^32"],["^32","^7M"]],"^1G",null,"^1X",2,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^1[",[["^ ","^1X",1,"^1I",false,"^1V","^20"],["^ ","^1X",2,"^1I",false,"^1V","^49"]],"^12",166,"^14",166,"^1L",2,"^1M",true,"^17",["^18",[["^32"],["^32","^7M"]]],"^1D","Return a sequence of `num-samples` (default 10)\n  realized values from `generator`.\n\n  The sequence starts with small values from the generator, which\n  probably do not reflect the variety of values that will be generated\n  during a longer test run.\n\n  Note that this function is a dev helper and is not meant to be used\n  to build other generators."],"~$randomized",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1629,"^13",17,"^14",1629,"^15",27,"^16",true,"^17",["^18",["^19",["^18",[["~$func"]]]]],"^1D","Like sized, but passes an rng instead of a size."],"^16",true,"^J","~$clojure.test.check.generators/randomized","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",27,"^1F",["^18",[["^7P"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1629,"^1J","^1S","^14",1629,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^7P"]]]]],"^1D","Like sized, but passes an rng instead of a size."],"~$NEG_INFINITY",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1093,"^13",16,"^14",1093,"^15",28,"^16",true],"^16",true,"^J","~$clojure.test.check.generators/NEG_INFINITY","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",28,"^13",1,"^12",1093,"^14",1093,"^1V","^3R"],"^D",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",620,"^13",7,"^14",620,"^15",11,"^17",["^18",["^19",["^18",[["^32"]]]]],"^1D","Like `vector`, but generates lists."],"^J","~$clojure.test.check.generators/list","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",11,"^1F",["^18",[["^32"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",620,"^1J","^1S","^14",620,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^32"]]]]],"^1D","Like `vector`, but generates lists."],"~$large-integer*",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1039,"^13",7,"^14",1039,"^15",21,"^17",["^18",["^19",["^18",[[["^ ","^4R",["^2:","^2;"]]]]]]],"^1D","Like large-integer, but accepts options:\n\n    :min  the minimum integer (inclusive)\n    :max  the maximum integer (inclusive)\n\n  Both :min and :max are optional.\n\n      (gen/sample (gen/large-integer* {:min 9000 :max 10000}))\n      => (9000 9001 9001 9002 9000 9003 9006 9030 9005 9044)","^1T","0.9.0"],"^1T","0.9.0","^J","~$clojure.test.check.generators/large-integer*","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",21,"^1F",["^18",[["~$p__22695"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1039,"^1J","^20","^14",1039,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[[["^ ","^4R",["^2:","^2;"]]]]]]],"^1D","Like large-integer, but accepts options:\n\n    :min  the minimum integer (inclusive)\n    :max  the maximum integer (inclusive)\n\n  Both :min and :max are optional.\n\n      (gen/sample (gen/large-integer* {:min 9000 :max 10000}))\n      => (9000 9001 9001 9002 9000 9003 9006 9030 9005 9044)"],"~$abs",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1002,"^13",17,"^14",1002,"^15",20,"^16",true,"^17",["^18",["^19",["^18",[["~$x"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/abs","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",20,"^1F",["^18",[["~$x"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1002,"^1J","^20","^14",1002,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["~$x"]]]]]],"^E",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1474,"^13",6,"^14",1474,"^15",13],"^J","~$clojure.test.check.generators/keyword","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",13,"^13",1,"^12",1474,"^14",1474,"^1V","^1S","^1D","Generates keywords without namespaces."],"~$gen-tuple",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",84,"^13",8,"^14",84,"^15",17,"^16",true,"^17",["^18",["^19",["^18",[["~$gens"]]]]],"^1D","Takes a collection of generators and returns a generator of vectors."],"^16",true,"^J","~$clojure.test.check.generators/gen-tuple","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",17,"^1F",["^18",[["^80"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",84,"^1J","^1S","^14",84,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^80"]]]]],"^1D","Takes a collection of generators and returns a generator of vectors."],"~$bind-helper",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",116,"^13",8,"^14",116,"^15",19,"^16",true,"^17",["^18",["^19",["^18",[["~$f"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/bind-helper","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",19,"^1F",["^18",[["~$f"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",116,"^1J","^5R","^14",116,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["~$f"]]]]]],"^F",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",665,"^13",7,"^14",665,"^15",15,"^17",["^18",["^19",["^18",[["~$&","~$kvs"]]]]],"^1D","Like clojure.core/hash-map, except the values are generators.\n   Returns a generator that makes maps with the supplied keys and\n   values generated using the supplied generators.\n\n       (gen/sample (gen/hash-map :a gen/boolean :b gen/nat))\n       => ({:a false, :b 0}\n           {:a true,  :b 1}\n           {:a false, :b 2}\n           {:a true,  :b 2}\n           {:a false, :b 4}\n           {:a false, :b 2}\n           {:a true,  :b 3}\n           {:a true,  :b 4}\n           {:a false, :b 1}\n           {:a false, :b 0})","^1W",["^ ","^1I",true,"^1X",0,"^1L",0,"^1F",[["^18",["^84"]]],"^17",["^18",[["~$&","^84"]]],"^1H",["^18",[null]]]],"^J","~$clojure.test.check.generators/hash-map","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",15,"^1W",["^ ","^1I",true,"^1X",0,"^1L",0,"^1F",[["^18",["^84"]]],"^17",["^18",[["~$&","^84"]]],"^1H",["^18",[null]]],"^1F",[["^18",["^84"]]],"^1G",null,"^1X",0,"^1H",["^18",[null]],"^13",1,"^1I",true,"^1[",[["^ ","^1X",0,"^1I",true,"^1V","^1S"]],"^12",665,"^1J","^20","^14",665,"^1L",0,"^1M",true,"^17",["^18",[["~$&","^84"]]],"^1D","Like clojure.core/hash-map, except the values are generators.\n   Returns a generator that makes maps with the supplied keys and\n   values generated using the supplied generators.\n\n       (gen/sample (gen/hash-map :a gen/boolean :b gen/nat))\n       => ({:a false, :b 0}\n           {:a true,  :b 1}\n           {:a false, :b 2}\n           {:a true,  :b 2}\n           {:a false, :b 4}\n           {:a false, :b 2}\n           {:a true,  :b 3}\n           {:a true,  :b 4}\n           {:a false, :b 1}\n           {:a false, :b 0})"],"~$call-gen",["^ ","^1O",true,"^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",39,"^13",7,"^14",39,"^15",15,"^17",["^18",["^19",["^18",[[["^ ","^5;","^1P"],"~$rnd","^1?"]]]]],"^1D","Internal function.","^1O",true],"^J","~$clojure.test.check.generators/call-gen","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",15,"^1F",["^18",[["~$p__22539","^87","^1?"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",39,"^1J","^20","^14",39,"^1L",3,"^1M",true,"^17",["^18",["^19",["^18",[[["^ ","^5;","^1P"],"^87","^1?"]]]]],"^1D","Internal function."],"~$rand-range",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",246,"^13",8,"^14",246,"^15",18,"^16",true,"^17",["^18",["^19",["^18",[["^87","^2B","^2C"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/rand-range","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",18,"^1F",["^18",[["^87","^2B","^2C"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",246,"^1J","^2?","^14",246,"^1L",3,"^1M",true,"^17",["^18",["^19",["^18",[["^87","^2B","^2C"]]]]]],"~$ratio",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1504,"^13",6,"^14",1504,"^15",11],"^J","~$clojure.test.check.generators/ratio","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",11,"^13",1,"^12",1504,"^14",1504,"^1V","^1S","^1D","Generates a small ratio (or integer) using gen/small-integer. Shrinks\n  toward simpler ratios, which may be larger or smaller."],"~$transient-set-contains?",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",695,"^13",17,"^14",695,"^15",40,"^16",true,"^17",["^18",["^19",["^18",[["~$s","~$k"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/transient-set-contains?","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",40,"^1F",["^18",[["~$s","~$k"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",695,"^1J","^:","^14",695,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["~$s","~$k"]]]]]],"~$such-that",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",440,"^13",7,"^14",440,"^15",16,"^17",["^18",["^19",["^18",[["^4Q","^1="],["^4Q","^1=","~$max-tries-or-opts"]]]]],"^1D","Creates a generator that generates values from `gen` that satisfy predicate\n  `pred`. Care is needed to ensure there is a high chance `gen` will satisfy\n  `pred`. By default, `such-that` will try 10 times to generate a value that\n  satisfies the predicate. If no value passes this predicate after this number\n  of iterations, a runtime exception will be thrown. Note also that each\n  time such-that retries, it will increase the size parameter.\n\n  Examples:\n\n      ;; generate non-empty vectors of integers\n      ;; (note, gen/not-empty does exactly this)\n      (gen/such-that not-empty (gen/vector gen/small-integer))\n\n  You can customize `such-that` by passing an optional third argument, which can\n  either be an integer representing the maximum number of times test.check\n  will try to generate a value matching the predicate, or a map:\n\n      :max-tries  positive integer, the maximum number of tries (default 10)\n      :ex-fn      a function of one arg that will be called if test.check cannot\n                  generate a matching value; it will be passed a map with `:gen`,\n                  `:pred`, and `:max-tries` and should return an exception","^1W",["^ ","^1I",false,"^1X",3,"^1L",3,"^1F",[["^4Q","^1="],["^4Q","^1=","^8A"]],"^17",["^18",[["^4Q","^1="],["^4Q","^1=","^8A"]]],"^1H",["^18",[null,null]]]],"^J","~$clojure.test.check.generators/such-that","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",16,"^1W",["^ ","^1I",false,"^1X",3,"^1L",3,"^1F",[["^4Q","^1="],["^4Q","^1=","^8A"]],"^17",["^18",[["^4Q","^1="],["^4Q","^1=","^8A"]]],"^1H",["^18",[null,null]]],"^1F",[["^4Q","^1="],["^4Q","^1=","^8A"]],"^1G",null,"^1X",3,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^1[",[["^ ","^1X",2,"^1I",false,"^1V","^20"],["^ ","^1X",3,"^1I",false,"^1V","^1S"]],"^12",440,"^14",440,"^1L",3,"^1M",true,"^17",["^18",[["^4Q","^1="],["^4Q","^1=","^8A"]]],"^1D","Creates a generator that generates values from `gen` that satisfy predicate\n  `pred`. Care is needed to ensure there is a high chance `gen` will satisfy\n  `pred`. By default, `such-that` will try 10 times to generate a value that\n  satisfies the predicate. If no value passes this predicate after this number\n  of iterations, a runtime exception will be thrown. Note also that each\n  time such-that retries, it will increase the size parameter.\n\n  Examples:\n\n      ;; generate non-empty vectors of integers\n      ;; (note, gen/not-empty does exactly this)\n      (gen/such-that not-empty (gen/vector gen/small-integer))\n\n  You can customize `such-that` by passing an optional third argument, which can\n  either be an integer representing the maximum number of times test.check\n  will try to generate a value matching the predicate, or a map:\n\n      :max-tries  positive integer, the maximum number of tries (default 10)\n      :ex-fn      a function of one arg that will be called if test.check cannot\n                  generate a matching value; it will be passed a map with `:gen`,\n                  `:pred`, and `:max-tries` and should return an exception"],"~$shrink-int",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",209,"^13",8,"^14",209,"^15",18,"^16",true,"^17",["^18",["^19",["^18",[["~$integer"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/shrink-int","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",18,"^1F",["^18",[["^8D"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",209,"^1J","^49","^14",209,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^8D"]]]]]],"~$random-pseudofactoring",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1611,"^13",19,"^14",1611,"^15",41,"^16",true,"^17",["^18",["^19",["^18",[["~$n","^1>"]]]]],"^1D","Returns (not generates) a random collection of integers `xs`\n  greater than 1 such that (<= (apply * xs) n)."],"^16",true,"^J","~$clojure.test.check.generators/random-pseudofactoring","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",41,"^1F",["^18",[["~$n","^1>"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",3,"^1I",false,"^12",1611,"^1J","^6N","^14",1611,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["~$n","^1>"]]]]],"^1D","Returns (not generates) a random collection of integers `xs`\n  greater than 1 such that (<= (apply * xs) n)."],"~$vector-distinct-by",["^ ","^[",null,"^10",["^ ","^1T","0.9.0","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",25,"^1W",["^ ","^1I",false,"^1X",3,"^1L",3,"^1F",[["^1;","^1="],["^1;","^1=","^1Y"]],"^17",["^18",[["^1;","^1="],["^1;","^1=","^1Y"]]],"^1H",["^18",[null,null]]],"^13",7,"^12",865,"^14",865,"^17",["^18",["^19",["^18",[["^1;","^1="],["^1;","^1=","^1Y"]]]]],"^1D","Generates a vector of elements from the given generator, with the\n  guarantee that (map key-fn the-vector) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"],"^1T","0.9.0","^J","~$clojure.test.check.generators/vector-distinct-by","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",25,"^1W",["^ ","^1I",false,"^1X",3,"^1L",3,"^1F",[["^1;","^1="],["^1;","^1=","^1Y"]],"^17",["^18",[["^1;","^1="],["^1;","^1=","^1Y"]]],"^1H",["^18",[null,null]]],"^1F",[["^1;","^1="],["^1;","^1=","^1Y"]],"^1G",null,"^1X",3,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^1[",[["^ ","^1X",2,"^1I",false,"^1V","^20"],["^ ","^1X",3,"^1I",false,"^1V","^1S"]],"^12",865,"^14",865,"^1L",3,"^1M",true,"^17",["^18",[["^1;","^1="],["^1;","^1=","^1Y"]]],"^1D","Generates a vector of elements from the given generator, with the\n  guarantee that (map key-fn the-vector) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception"],"~$swap",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",632,"^13",8,"^14",632,"^15",12,"^16",true,"^17",["^18",["^19",["^18",[["^39",["~$i1","~$i2"]]]]]]],"^16",true,"^J","~$clojure.test.check.generators/swap","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",12,"^1F",["^18",[["^39","~$p__22618"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",632,"^1J",["^6",["^6N","^20"]],"^14",632,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["^39",["^8K","^8L"]]]]]]],"~$size->max-leaf-count",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1603,"^13",17,"^14",1603,"^15",37,"^16",true,"^17",["^18",["^19",["^18",[["^1?"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/size->max-leaf-count","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",37,"^1F",["^18",[["^1?"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1603,"^1J","^2?","^14",1603,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^1?"]]]]]],"~$int-rose-tree",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",213,"^13",8,"^14",213,"^15",21,"^16",true,"^17",["^18",["^19",["^18",[["^4<"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/int-rose-tree","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",21,"^1F",["^18",[["^4<"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",213,"^1J","^1K","^14",213,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^4<"]]]]]],"~$fmap",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",94,"^13",7,"^14",94,"^15",11,"^17",["^18",["^19",["^18",[["~$f","^1="]]]]],"^1D","Returns a generator like `gen` but with values transformed by `f`.\n  E.g.:\n\n      (gen/sample (gen/fmap str gen/nat))\n      => (\"0\" \"1\" \"0\" \"1\" \"4\" \"3\" \"6\" \"6\" \"4\" \"2\")\n\n  Also see gen/let for a macro with similar functionality."],"^J","~$clojure.test.check.generators/fmap","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",11,"^1F",["^18",[["~$f","^1="]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",94,"^1J","^1S","^14",94,"^1L",2,"^1M",true,"^17",["^18",["^19",["^18",[["~$f","^1="]]]]],"^1D","Returns a generator like `gen` but with values transformed by `f`.\n  E.g.:\n\n      (gen/sample (gen/fmap str gen/nat))\n      => (\"0\" \"1\" \"0\" \"1\" \"4\" \"3\" \"6\" \"6\" \"4\" \"2\")\n\n  Also see gen/let for a macro with similar functionality."],"~$MAX_INTEGER",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",997,"^13",16,"^14",997,"^15",27,"^16",true],"^16",true,"^J","~$clojure.test.check.generators/MAX_INTEGER","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",27,"^13",1,"^12",997,"^14",997,"^1V","^2?"],"~$->Generator",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",21,"^13",12,"^5P",true,"^6U","~:positional","^12",28,"^14",28,"^17",["^18",["^19",["^18",[["^1="]]]]],"^1D","Positional factory function for clojure.test.check.generators/Generator."],"^J","~$clojure.test.check.generators/->Generator","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",21,"^1F",["^18",[["^1="]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^5P",true,"^1I",false,"^6U","^8X","^12",28,"^1J","^1S","^14",28,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^1="]]]]],"^1D","Positional factory function for clojure.test.check.generators/Generator."],"~$no-shrink",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",501,"^13",7,"^14",501,"^15",16,"^17",["^18",["^19",["^18",[["^1="]]]]],"^1D","Creates a new generator that is just like `gen`, except does not shrink\n  at all. This can be useful when shrinking is taking a long time or is not\n  applicable to the domain."],"^J","~$clojure.test.check.generators/no-shrink","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",16,"^1F",["^18",[["^1="]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",501,"^1J","^1S","^14",501,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["^1="]]]]],"^1D","Creates a new generator that is just like `gen`, except does not shrink\n  at all. This can be useful when shrinking is taking a long time or is not\n  applicable to the domain."],"~$char-ascii",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1383,"^13",6,"^14",1383,"^15",16],"^J","~$clojure.test.check.generators/char-ascii","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",16,"^13",1,"^12",1383,"^14",1383,"^1V","^1S","^1D","Generates only ascii characters."],"~$simple-type-printable",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1564,"^13",6,"^14",1564,"^15",27],"^J","~$clojure.test.check.generators/simple-type-printable","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",27,"^13",1,"^12",1564,"^14",1564,"^1V","^1S","^1D","Generates a variety of scalar types, with printable strings."],"~$base-simple-type",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1555,"^13",17,"^14",1555,"^15",33,"^16",true,"^17",["^18",["^19",["^18",[["~$double-gen","~$char-gen","~$string-gen"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/base-simple-type","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",33,"^1F",["^18",[["^95","^96","^97"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",1555,"^1J","^1S","^14",1555,"^1L",3,"^1M",true,"^17",["^18",["^19",["^18",[["^95","^96","^97"]]]]]],"~$halfs",["^ ","^[",null,"^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",205,"^13",8,"^14",205,"^15",13,"^16",true,"^17",["^18",["^19",["^18",[["~$n"]]]]]],"^16",true,"^J","~$clojure.test.check.generators/halfs","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",13,"^1F",["^18",[["~$n"]]],"^1G",null,"^1H",["^18",[null,null]],"^13",1,"^1I",false,"^12",205,"^1J","^49","^14",205,"^1L",1,"^1M",true,"^17",["^18",["^19",["^18",[["~$n"]]]]]],"~$symbol-name-or-namespace",["^ ","^10",["^ ","^11","/Users/jb/Google-Drive/Planung/Clojure-Script/dep-reframe/target/public/cljs-out/dep/clojure/test/check/generators.cljc","^12",1457,"^13",16,"^14",1457,"^15",40,"^16",true],"^16",true,"^J","~$clojure.test.check.generators/symbol-name-or-namespace","^11","target/public/cljs-out/dep/clojure/test/check/generators.cljc","^15",40,"^13",1,"^12",1457,"^14",1457,"^1V","^1S","^1D","Generates a namespace string for a symbol/keyword."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^4","^4","^V","^Q","^Q","^Q"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:max-tries","~:min","^43","~:max-tries-or-opts","~:pred","~:else","^1P","~$do","^1=","^33","~$if","~:infinite?","~$cljs.core/let","^3G","~:max","~$/","~$cljs.core/fn","^4G","~:max-elements","~:ex-fn","~:num-elements","~$val__22767__auto__","~:min-elements","~:NaN?"]],"~:order",["^1P","^1=","^9M","^9A","^9D","^9E","^9C","^9N","^9P","^9L","^9B","^9J","^9H","^9Q","~$/","^9I","^9O","^9F","^9G","^43","^4G","^33","^9K","^3G"]],"^1D",null]